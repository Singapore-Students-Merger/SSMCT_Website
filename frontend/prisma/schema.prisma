generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model categories {
  categoryId     Int              @id @default(autoincrement())
  categoryName   String           @db.Text
  user           user[]
  usercategories usercategories[]
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id             String           @id
  name           String?
  realName       String?
  discordId      String?          @unique(map: "User_discordId_key")
  image          String?
  mainCategoryId Int?
  email          String?          @unique(map: "User_email_key")
  emailVerified  Boolean?
  account        account[]
  session        session[]
  categories     categories?      @relation(fields: [mainCategoryId], references: [categoryId], map: "user_ibfk_1")
  usercategories usercategories[]

  @@index([mainCategoryId], map: "mainCategoryId")
}

model usercategories {
  userId     String
  categoryId Int
  user       user       @relation(fields: [userId], references: [id], onDelete: Cascade, map: "usercategories_ibfk_1")
  categories categories @relation(fields: [categoryId], references: [categoryId], onUpdate: Restrict, map: "usercategories_ibfk_2")

  @@id([userId, categoryId])
  @@index([categoryId], map: "categoryId")
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}
